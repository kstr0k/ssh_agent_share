#!/usr/bin/env perl

use strict; use warnings; use v5.28.0;
use File::Basename qw( basename );
use File::Path qw( make_path );
use Sys::Hostname qw( hostname );
use Time::HiRes ();
use Fcntl qw( :flock );

my $Script = basename $0;
exit main();

sub usage {
  my ($fh, $msg, $exitval) = @_;
  print $fh "$msg\n" if length( $msg );
  print $fh <<EOMSG;
Usage: $Script [OPTION]...
  --help           print this help message
  --[no-]-inherit  use/ignore SSH_AUTH_SOCK from environment
  --lockwait W     seconds to wait for lock (default: 1.5)
  --timeout T      default expiry time for all identities (3 days in secs)
  --dir PATH       agent credential cache path (~/.ssh/.ssh_agent_share/)
  --host HOST      override default hostname

Example:
  eval >/dev/null "\$($Script --lockwait 3)"
EOMSG
  $exitval;
}

sub main {
  my %clio = (
    inherit  => 1,
    lockwait => 1.5,
    timeout  => 260000,
    dir => "$ENV{ HOME }/.ssh/.ssh_agent_share"
  );

  while( scalar @ARGV ) {
    my $arg = shift @ARGV;
    return usage( *STDOUT, '', 0 ) if( $arg eq '--help' );
    if( $arg =~ /^--(no(-)?)inherit$/ ) {
      $clio{ inherit } = !( length $1 );
    } elsif( $arg =~ qr{^--(lockwait|timeout|dir|host)} ) {
      exit usage( *STDERR, "Missing value for $arg", 1 ) unless scalar @ARGV;
      $clio{ $1 } = shift @ARGV;
    } else {
      exit usage( *STDERR, "Unknown argument $arg", 1 );
    }
  }
  $clio{ host } //= hostname;

  my ($auth_sock, $agent_pid) = @ENV{ qw( SSH_AUTH_SOCK SSH_AGENT_PID ) };
  exit 0 if $clio{ inherit } and length( $auth_sock );

  my $out = '';

  make_path $clio{ dir } unless -d $clio{ dir };
  my $file = "$clio{ dir }/$clio{ host }.sh";

  my $lock = get_lock( $file, $clio{ lockwait });

  $out = slurp( $file ) if -r $file;

  $agent_pid = $out =~ s{.*SSH_AGENT_PID=([^;\n]*).*}{$1}sr;
  $auth_sock = $out =~ s{.*SSH_AUTH_SOCK=([^;\n]*).*}{$1}sr;

  if( defined( $auth_sock ) and -w( $auth_sock ) and defined( $agent_pid ) and kill( 0, $agent_pid ) ) {
    print $out;
    exit 0;
  }

  die $! unless defined( my $pid = fork );
  if( $pid ) {  # parent: hold lock
    waitpid $pid, 0;
    exit 0;
  } else {  # child: release lock, start agent
    close $lock;
    $out = qx( ssh-agent -t $clio{ timeout });
    open( my $fh, '>', $file );
    print $fh $out;
    print $out;
  }
}

sub slurp {
  my ($file) = @_;
  open( my $fh, '<', $file ) or die $!;
  local $/;
  <$fh>;
}

sub get_lock {
  my ($file, $lockwait) = @_;
  open( my $lock, '>>', $file ) or die $!;
  return $lock if flock $lock, LOCK_EX | LOCK_NB;
  my $alarm_exception = "$Script: flock timed out\n";
  eval {
    local $SIG{ ALRM } = sub { die $alarm_exception };
    Time::HiRes::alarm $lockwait;
    flock $lock, LOCK_EX;
    Time::HiRes::alarm 0;
  };
  if( $@ ) {
    if( $@ eq quotemeta( $alarm_exception ) ) {
      die qq(couldn't lock $file);
    } else {
      die $@;
    }
  }
  $lock;
}
